import pandas as pd
import matplotlib.pyplot as plt
from sklearn import linear_model
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn import metrics  
from sklearn.metrics import r2_score
data=pd.read_csv('../input/prediction-using-supervised-ml/data.txt')
data
data.shape
data.plot(kind='scatter',x='Hours',y='Scores')
plt.show()
data.plot(kind='box')
#splitting the dataset into test set and train set
a = data.iloc[:, :-1].values
b = data.iloc[:, -1].values
a_train, a_test, b_train, b_test = train_test_split(a, b, test_size = 0.33)
#correlation coefficients
data.corr()
#I'm changing the dataframe variables' names
H=pd.DataFrame(data['Hours'])
S=pd.DataFrame(data['Scores'])
#LinearRegressionmodel
lm=linear_model.LinearRegression()
model=lm.fit(a_train,b_train)
model.coef_
model.intercept_
#Evaluation of the model
model.score(a_train,b_train)
x=([5,6,8,7,9])
x=pd.DataFrame(x) 
y=model.predict(x)
y=pd.DataFrame(y)
df=pd.concat([x,y],axis=1,keys=['H','S'])
df
#plotting the existing data
data.plot(kind='scatter',x='Hours',y='Scores')
#plotting the other predicted values
plt.plot(np.array(x),np.array(y),color='yellow',linewidth=3)
#regressonline
line =model.coef_*a+model.intercept_
plt.plot(a, line,color = 'black');
plt.show()

#predicting the test set values
b_pred = model.predict(a_test)
print(b_pred)

#Visualising the Training set results
plt.scatter(a_train, b_train, color = 'blue')
plt.plot(a_train, model.predict(a_train), color = 'green')
plt.show()

#Visualising the Test set results
plt.scatter(a_test, b_test, color = 'green')
plt.plot(a_train, model.predict(a_train), color = 'blue')
plt.show()

#Now,I want to compare the actual values with the predicted ones.
dataset = pd.DataFrame({'Actual': b_test, 'Predicted': b_pred})  

dataset

#prediction for 9.25hrs a day
dataset = np.array(9.25)
dataset = dataset.reshape(-1, 1)
pred = model.predict(dataset)
print(format(pred))

#Error estimation
print('Mean Absolute Error:', metrics.mean_absolute_error(b_test, b_pred))

print("The R-Square of the model is: ",r2_score(b_test,b_pred))
